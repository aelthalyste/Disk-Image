Changelog 

30.11.2020 
-Before this update, SetIncRecords and SetDiffRecords was sorting and merging regions in mutex locked region, that was causing msg thread to stall and unable to 
fetch updates on time, causing it to skip significant amount of regions. That was pretty dumb, no idea how I did end up writing code like that, now in locked region, I
just fetch data, release mutex, then process it.
-This one is sneaky bug, in setupstreams, there is a special, but temporary, code block that adds mft regions to stream of records collected. Now that might not seem like a problem,
but if you end up adding lots of files since last backup, you will end up having completely different number of MFT records(generally speaking, it increases), but argument passed
on SetupStream, StreamInfo struct doesnt update accordingly! So you end up copying less bytes than needed, since extra addition of regions didnt updated in the StreamInfo struct. Causing
SetupStream to return false
-Looks like I was leaking almost all memory I allocted in the msg loop... Fixed
-SaveMetadata was interpreting non-changed volumes as errors but looks like volume might not change between versions. Now it accepts it


04.12.2020
-I realized that I were adding MFT and INDX stuff more than to stream, per backup. SetupStream was in total mess, cleared it a bit and made more conceise.
-Metadata's was not just simply storing MFT, but also INDX stuff, which they shouldnt, actually they shouldnt even store mft data itself too! but thats another fix for another day. So problem was file explorer couldn't able to
move freely in backups, due to extra regions added by INDX stuff to the MFTRegions. Metadata should contain only and ONLY MFT regions, not INDX. File explorer does not expect to have anything other than MFT regions itself in backup
metadata. And general backup system doesnt even need INDX regions too, so I jsut removed all INDX regions and datas from metadatas. But INDX and MFT regions are actually in the backup, in move naive way. Their region's temporarely
calculated at SetupStream, then added to general region scheme.
-Some API changes, i found that old data_array thing was dumb decision. But it's used so often i dont want to just rewrite everything. But each bug fix and new request is an opporunity to fix some old bad decisions.


17.12.2020
-Small changes in driver(made VolumeRegionBuffer live in stack, reorganized dispatch routine at FilterUnload callback), but it stil crashes when shutting pc down. 
-Added nice-to-have functions to small ntfs parser to remove cumbersome-repetetive parts of it, like:
	-set file pointer to specific mft id
	-direct read of specific file record from mft id
	-some basic stuff related to file attribute parsing, made writing a code that involves scanning of file record easier(see NarResolveAttributeList implementation)
-Moved some janky macro definitions to header file, stuff like attribute id, pointer addition		
-There are regions that need to be replaced with new compressed API, especially in NarGetFileListFromMFTID
-There are REGIONS/FUNCTIONS THAT ARE NOT IMPLEMENTED YET, ex: trimming parts of indx_allocation regions with the information from bitmap attribute, functions are kinda ready but not implemented

18.12.2020
-Rewritten NarGetFileListFromMFTID with new API, not actual rewrite operation, actually just made API from it's bones and replaced with new ones!

20.12.2020
My lazzy side was on keyboard yesterday. I ended up not writing any changelog for yesterday's changes.
-I have updated some of the parts in the file restore thing, with new API.
-Removed file name and rootdir parts of file_version_stack struct. Completely unnecessary member unrelated to what struct aims to do.
-Removed memory allocation for data of bitmap attribute, if one present. Since bitmap data is not going to be larger than 1kb, it's safe to allocate it on stack, no overheat from malloc!
-Added NarGetFileNameFromPath
-There was case where when resolving attribute list, attribute list was pointing back to original file record and since original file record was parsing itself after calling resolvefileattributelist, that was resulting parsing file record two times.
So I added parameter(MFTID of original file) to indicate where we came from. This helped to detect self pointing attribute lists.
-There are special cases for MFTID, resulting almost doubling the code for parsing INDX_ALLOCATION attribute in codebase. Sadly, there is no solution available that im aware of.
That special case is handled at call NarGetFileListFromMFTID, that was sanest choice to make API more generic and clean, more state independent.
-Changed function parameters of all restorefile API to const wchar_t*.
-Fixed memory access violation due to passing everything as wchar_t* when some of the things were coming directly from executable memory, resulting wcstok to edit adress that is not valid. Changing everying to const wchar_t*(as it should be), and made copies of them
if any modification needed is solved access violation errors. That thing should have been fixed much time ago, I spotted it after I have written the API at the first day. Fix came up today, took 1 minute :).

